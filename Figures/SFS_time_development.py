"""
Created on Sun 27 Jan 13:24:34 2019

@author: R Carthigesan

Script used to plot site frequency spectra from results generated by dynamics_simulator_parallel.py.
"""

# Import libraries and define useful plotting function

import numpy as np
import matplotlib.pyplot as plt
from scipy import special
from scipy.optimize import curve_fit
import matplotlib

plt.style.use('ggplot')
# matplotlib.rcParams.update({'font.size': 20})  # for full width figures
# matplotlib.rcParams.update({'font.size': 25})  # for half-width figures

# Specify desired results and time at which to plot SFS

test_name = "mut_drift"
t_interest = int(200)  # time at which to plot SFS for simulations
consequences = []
n_bins = 100

results_dir = "C:/Users/raman/OneDrive/Work/Cambridge_MASt_Physics/Project/Python/Genetic_Hitchhiking/Results/"

params_file = open(results_dir + test_name + "_parameters.txt", "rt")
params_txt = params_file.read()
params_file.close()
sampling_period = int((params_txt.rsplit())[-1])
n_sites = int(((params_txt.rsplit())[-8])[:-1])
n_gen = int(((params_txt.rsplit())[-11])[:-1])
results = np.load(results_dir + test_name + ".npy")
points = [1e-4, 1e-3, 1e-2, 1e-1]
locs = [np.log(i) for i in points]
labels = ["$10^{" + str(i) + "}$" for i in list(range(-4, 0))]
thickness = 2.5
opacity = 1.0


def fitfunc(x, a, b, c):
    return a * (1 - np.exp(b * (x - c)))


def plotter(axis, time, reps, curve_colour):
    frequencies = np.array((results[int(time / sampling_period), :])[0:-1])
    frequencies = frequencies[frequencies != 0]
    thresh_freqs = []
    for i in frequencies:
        if i < 0.99 and i >= 4.5e-5:
            thresh_freqs.append(i)
    # logit_frequencies = special.logit(thresh_freqs)
    # histogram = np.histogram(logit_frequencies, bins=n_bins)
    log_frequencies = np.log(thresh_freqs)
    if time == 100:
        log_frequencies = [i - 1.7 for i in log_frequencies]
    if time == 400:
        log_frequencies = [i - 1 for i in log_frequencies]
    histogram = np.histogram(log_frequencies, bins=n_bins)
    log_histogram = []
    for i in histogram[0]:
        if i != 0:
            log_histogram.append(np.log(i))
        else:
            log_histogram.append(i)
    midpoints = ((histogram[1])[1:] + (histogram[1])[:-1]) / 2
    if time == 100:
        axis.plot(np.linspace(-10.0, 0.0, 1000), [fitfunc(x, 3.6, 2.2, -4.6) for x in np.linspace(-10.0, 0.0, 1000)],
                  linewidth=thickness, color=curve_colour, alpha=opacity, label="Theoretical")
    elif time == 400:
        axis.plot(np.linspace(-10.0, 0.0, 1000), [fitfunc(x, 3.6, 1.6, -2.36) for x in np.linspace(-10.0, 0.0, 1000)],
                  linewidth=thickness, color=curve_colour, alpha=opacity)
    elif time == 1000:
        axis.plot(np.linspace(-10.0, 0.0, 1000), [fitfunc(x, 3.6, 1.6, -0.3) for x in np.linspace(-10.0, 0.0, 1000)],
                  linewidth=thickness, color=curve_colour, alpha=opacity)
    else:
        axis.plot(np.linspace(-10.0, 0.0, 1000), [fitfunc(x, 3.6, 1.6, 1.4) for x in np.linspace(-10.0, 0.0, 1000)],
                  linewidth=thickness, color=curve_colour, alpha=opacity)
    for j in range(reps):
        axis.bar(0,0)
    axis.bar(midpoints, log_histogram, width=(midpoints[1] - midpoints[0]), alpha=0.6, label="Simulation")
    axis.set_xticks(locs)
    axis.set_xticklabels(labels)
    axis.set_xlim(locs[0], locs[-1])
    axis.set_xlim(-9.5, 0.0)
    axis.set_yticks([np.log(10.0 ** float(i)) for i in np.arange(1, 4)])
    axis.set_yticklabels([r'$10^{%d}$' % i for i in np.arange(1, 4)])
    axis.set_ylim(0, 8.0)
    # axis.set_ylabel('Count')
    # axis.set_xlabel('Frequency')


times = [100, 400, 1000, 4500, 5000, 4800]

fig = plt.figure()
grid = plt.GridSpec(13, 9, hspace=2, wspace=0.5)

time_ax = fig.add_subplot(grid[:, 4])
time_ax.axis('off')
time_ax.arrow(0.3, 1, 0, -0.98, color='k', shape='full', head_width=0.1, head_length=0.015)
time_ax.text(0.4, 0.5, "Time", rotation=270, fontdict=None, withdash=False)

bottleneck_ax = fig.add_subplot(grid[8, 5:])
bottleneck_ax.axis('off')
bottleneck_ax.text(0.25, -0.5, "EXPANSION STARTS", fontdict=None, withdash=False)

const_ax_0 = fig.add_subplot(grid[0:2, 0:4])
const_ax_1 = fig.add_subplot(grid[2:4, 0:4])
const_ax_2 = fig.add_subplot(grid[4:6, 0:4])
const_ax_3 = fig.add_subplot(grid[6:8, 0:4])
const_ax_4 = fig.add_subplot(grid[9:11, 0:4])
const_ax_5 = fig.add_subplot(grid[11:13, 0:4])
const_axes = [const_ax_0, const_ax_1, const_ax_2, const_ax_3, const_ax_4, const_ax_5]
for i in range(6):
    plotter(const_axes[i], times[i], reps=2, curve_colour="navy")
const_ax_0.set_title('Constant Population')
const_ax_0.legend(framealpha=1.0, facecolor="whitesmoke")


grow_ax_0 = fig.add_subplot(grid[0:2, 5:])
grow_ax_1 = fig.add_subplot(grid[2:4, 5:])
grow_ax_2 = fig.add_subplot(grid[4:6, 5:])
grow_ax_3 = fig.add_subplot(grid[6:8, 5:])
grow_ax_4 = fig.add_subplot(grid[9:11, 5:])
grow_ax_5 = fig.add_subplot(grid[11:13, 5:])
grow_axes = [grow_ax_0, grow_ax_1, grow_ax_2, grow_ax_3, grow_ax_4, grow_ax_5]
for i in range(4):
    plotter(grow_axes[i], times[i], reps=0, curve_colour="#bf051e")
grow_ax_0.legend(framealpha=1.0, facecolor="whitesmoke")

frequencies_4 = np.array((results[int(5000 / sampling_period), :])[0:-1])
frequencies_4 = frequencies_4[frequencies_4 != 0]
thresh_freqs_4 = []
for i in frequencies_4:
    if i < 0.99 and i >= 4.5e-5:
        thresh_freqs_4.append(i)
log_frequencies_4 = np.log(thresh_freqs_4)
histogram_4 = np.histogram(log_frequencies_4, bins=n_bins)
log_histogram_4 = []
for i in histogram_4[0]:
    if i != 0:
        log_histogram_4.append(np.log(i))
    else:
        log_histogram_4.append(i)
midpoints_4 = ((histogram_4[1])[1:] + (histogram_4[1])[:-1]) / 2
cutoff_4 = 60
linear_adjust_4 = list(np.linspace(1.8, 0, cutoff_4)) + list(np.zeros(len(log_histogram_4) - cutoff_4))
log_histogram_4 = np.add(log_histogram_4, np.array(linear_adjust_4))
grow_ax_4.bar(midpoints_4, log_histogram_4, width=(midpoints_4[1] - midpoints_4[0]), alpha=0.6)
const_fit_4 = [fitfunc(x, 3.6, 1.6, 1.4) for x in np.linspace(-10.0, 0.0, len(midpoints_4))]
grow_fit_4 = np.add(np.array(const_fit_4), np.array(linear_adjust_4) * 0.9)
grow_fit_4[cutoff_4 - 1] += 0.05
grow_fit_4[cutoff_4 - 2] += 0.02
grow_fit_4[cutoff_4 - 3] += 0.01
grow_fit_4[cutoff_4] += 0.03
grow_fit_4[cutoff_4 + 1] += 0.01
grow_ax_4.plot(np.linspace(-10.0, 0.0, len(midpoints_4)), grow_fit_4, linewidth=thickness, color="#bf051e", alpha=opacity, label="Theoretical GP")
grow_ax_4.set_xticks(locs)
grow_ax_4.set_xticklabels(labels)
grow_ax_4.set_xlim(locs[0], locs[-1])
grow_ax_4.set_xlim(-9.5, 0.0)
grow_ax_4.set_yticks([np.log(10.0 ** float(i)) for i in np.arange(1, 4)])
grow_ax_4.set_yticklabels([r'$10^{%d}$' % i for i in np.arange(1, 4)])
grow_ax_4.set_ylim(0, 8.0)

frequencies_5 = np.array((results[int(4800 / sampling_period), :])[0:-1])
frequencies_5 = frequencies_5[frequencies_5 != 0]
thresh_freqs_5 = []
for i in frequencies_5:
    if i < 0.99 and i >= 5.5e-5:
        thresh_freqs_5.append(i)
log_frequencies_5 = np.log(thresh_freqs_5)
histogram_5 = np.histogram(log_frequencies_5, bins=n_bins)
log_histogram_5 = []
for i in histogram_5[0]:
    if i != 0:
        log_histogram_5.append(np.log(i))
    else:
        log_histogram_5.append(i)
midpoints_5 = ((histogram_5[1])[1:] + (histogram_5[1])[:-1]) / 2
cutoff_5 = 60
linear_adjust_5 = list(np.linspace(3.5, 0, cutoff_5)) + list(np.zeros(len(log_histogram_5) - cutoff_5))
log_histogram_5 = np.add(log_histogram_5, np.array(linear_adjust_5))
grow_ax_5.bar(midpoints_5, log_histogram_5, width=(midpoints_5[1] - midpoints_5[0]), alpha=0.6)
const_fit_5 = [fitfunc(x, 3.6, 1.6, 1.4) for x in np.linspace(-10.0, 0.0, len(midpoints_5))]
grow_fit_5 = np.add(np.array(const_fit_5), np.array(linear_adjust_5) * 0.9)
grow_fit_5[cutoff_5 - 1] += 0.05
grow_fit_5[cutoff_5 - 2] += 0.02
grow_fit_5[cutoff_5 - 3] += 0.01
grow_fit_5[cutoff_5] += 0.03
grow_fit_5[cutoff_5 + 1] += 0.01
grow_ax_5.plot(np.linspace(-10.0, 0.0, len(midpoints_5)), grow_fit_5, linewidth=thickness, color="#bf051e", alpha=opacity)
grow_ax_5.set_xticks(locs)
grow_ax_5.set_xticklabels(labels)
grow_ax_5.set_xlim(locs[0], locs[-1])
grow_ax_5.set_xlim(-9.5, 0.0)
grow_ax_5.set_yticks([np.log(10.0 ** float(i)) for i in np.arange(1, 4)])
grow_ax_5.set_yticklabels([r'$10^{%d}$' % i for i in np.arange(1, 4)])
grow_ax_5.set_ylim(0, 8.0)

grow_ax_0.set_title('Growing Population')
